//–æ–±—Ä–∞—â–µ–Ω–∏—è –∫ API
'use strict'

const fs = require('fs');
const convert = require('xml-js')
const { EmbedBuilder, WebhookClient } = require('discord.js');
const { monthEnding, zeroToZero, backgroundDependancy, advicer } = require("./content");

const config = JSON.parse(fs.readFileSync('config.json'));
const weatherKey = config.weather_key

function sendWebhook(user, city, webhook, curr, 
        { morning_temp, morning_weather, day_temp, day_weather, evening_temp, evening_weather} ) {
    let date = new Date
    let today = date.getDate()
    let month = monthEnding(date.toLocaleString("ru-RU", { month: "long" }));
    let advice = advicer(morning_temp, day_temp, evening_temp, morning_weather, day_weather, evening_weather);
    let bg_color = backgroundDependancy(morning_temp, day_temp, evening_temp)

    const hook = new WebhookClient({ url: webhook });
    const embed = new EmbedBuilder()
        .setColor(bg_color)
        .addFields(
            { name: '__–ü–æ–≥–æ–¥–∞__', value: '\u200B', inline: true },
            { name: '\u200B', value: '\u200B', inline: true },
            { name: (today + ' ' + month), value: `**${city}**`, inline: true },
            { name: '\u200B', value: '\u200B' },
            { name: `üå°Ô∏è${morning_temp}¬∞C`, value: `*—É—Ç—Ä–æ–º*`, inline: true },
            { name: `üå°Ô∏è${day_temp}¬∞C`, value: `***–¥–Ω—ë–º***`, inline: true },
            { name: `üå°Ô∏è${evening_temp}¬∞C`, value: `*–≤–µ—á–µ—Ä–æ–º*`, inline: true },
            { name: `${morning_weather}`, value: '\u200B', inline: true },
            { name: `${day_weather}`, value: '\u200B', inline: true },
            { name: `${evening_weather}`, value: '\u200B', inline: true },
            { name: '\u200B', value: "```"+advice+"```" },
            { name: '\u200B', value: '\u200B' },
            { name: '__–ö—É—Ä—Å –¶–ë__', value: '\u200B', inline: true },
            { name: 'üíµ'+curr[0].currency, value: curr[0].rate2rubles+'‚ÇΩ', inline: true },
            { name: 'üí∂'+curr[1].currency, value: curr[1].rate2rubles+'‚ÇΩ', inline: true },
        )
        .setFooter({ text: 'Ev.A by @dormlaw' });

    hook.send({ embeds: [embed] });

    return console.log('[Embeds] was succsessfully sent to ' + user +  ' at ' +
        new Date().toLocaleString("ru-RU", { timeZone: "Europe/Moscow" }))
}

async function weatherRequest(id) {

    const url = `https://api.openweathermap.org/data/2.5/forecast?id=${id}&units=metric&appid=${weatherKey}&lang=ru`
    const response = await fetch(url);
    const data = await response.json();
    const day = new Date()
    
    //openweather –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ—Ç –ø–æ–≥–æ–¥—É –º–∏–Ω–∏–º—É–º –Ω–∞ 3 —á–∞—Å–∞ –≤–ø–µ—Ä–µ–¥
    //–∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø–æ–≥–æ–¥—É –Ω–∞ –≤–µ—Å—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –∏–º–µ–µ—Ç —Å–º—ã—Å–ª —Ç–æ–ª—å–∫–æ –¥–æ 3 –Ω–æ—á–∏ –ø–æ –º—Å–∫
    // –ø–æ—Å–ª–µ 3 —Å–æ—Ç—Ä–µ—Ç—Å—è –ø–æ–≥–æ–¥–∞ –Ω–∞ —É—Ç—Ä–æ
    // if ( (day.getHours() > 2) || ( (day.getHours() = 2) && (day.getMinutes() > 40) ) ) {
    if ( day.getHours() >= 2 ) {
        const now = new Date()
        day.setDate(now.getDate() + 1)
    }
    const today = day.getDate()

    let morning_temp
    let morning_weather
    let day_temp
    let day_weather
    let evening_temp
    let evening_weather

    data.list.forEach((key) => {
        const dateTime = new Date(key.dt * 1000);
        const date = dateTime.getDate();
        const time = dateTime.getHours();
        //—É–±–∏—Ä–∞–µ–º "-0"
        const temp = zeroToZero(Math.round(key.main.temp));
        const weather = key.weather[0].description

        if (date === today) {
            //openweathermap –¥–∞–µ—Ç –≤—Ä–µ–º—è –≤ UTC —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –≤ 3 —á–∞—Å–∞
            // '6' —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç 9 —á–∞—Å–∞–º —É—Ç—Ä–∞ –ø–æ –ú–°–ö –∏ —Ç.–¥.
            if(time == '6') { 
                morning_temp = temp
                morning_weather = weather
            }
            if(time == '9') { 
                day_temp = temp
                day_weather = weather
            }
            if(time == '15') { 
                evening_temp = temp
                evening_weather = weather
            }
        }
    })
    return {
            morning_temp, 
            morning_weather, 
            day_temp, 
            day_weather, 
            evening_temp, 
            evening_weather
        }
}

async function exchangeRate() {
    const url = 'http://www.cbr.ru/scripts/XML_daily.asp'
    const response = await fetch(url);
        if (response) {console.log('exchange rate has bben successfully recieved')}
    const result = await response.text();
    const data = convert.xml2js(result, { compact: true, spaces: 2 });

    let resultArr = []
    const dataArr = data.ValCurs.Valute
    dataArr.forEach((key) => {
        const item = {
            currency: key.CharCode._text,
                //–∑–∞–º–µ–Ω—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∑–Ω–∞–∫–æ–≤ "," –Ω–∞ "." –∏ –æ–∫—Ä—É–≥–ª—è–µ–º
            rate2rubles: `${(+(key.Value._text.replace(',', '.')) / 
                +(key.Nominal._text.replace(',', '.'))).toFixed(2)}`
        }
        if (key._attributes.ID === 'R01235' || 
            key._attributes.ID === 'R01239') {
                resultArr.push(item) 
        }
    })
    return resultArr
}

module.exports = { weatherRequest, sendWebhook, exchangeRate }